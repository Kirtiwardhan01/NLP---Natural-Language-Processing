{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyONYG4Y/ibk4cAraAVpCBOU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kirtiwardhan01/NLP---Natural-Language-Processing/blob/master/NLP%20using%20Textblob%20library%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n3ovv546hP7n",
        "colab_type": "text"
      },
      "source": [
        "###**NLP - Natural Language Processing** \n",
        "Understanding (processing) of everyday language\n",
        "\n",
        "2 Types of NLP:\n",
        "\n",
        "i. NLU - Natural Language Utilisation\n",
        "\n",
        "ii.NLG - Natural Language Generation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xkP9Iwo3hu7E",
        "colab_type": "text"
      },
      "source": [
        "**NLP with Textblob**\n",
        "\n",
        "1. Tokenization\n",
        "2. Stemming\n",
        "3. Lemmatization\n",
        "4. POS Tags\n",
        "5. Name Entity Recognition (NER)\n",
        "6. Chunking\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T74oyd98iQyJ",
        "colab_type": "text"
      },
      "source": [
        "**Textblob Features**\n",
        "\n",
        "1. Noun phrase extraction\n",
        "2. POS tagging\n",
        "3. Sentiment Analysis\n",
        "4. Classification (Naive Bayes, Decision Tree)\n",
        "5. Language translation and Language detection\n",
        "6. Tokenization\n",
        "7. Word and phrase frequencies\n",
        "8. Parsing\n",
        "9. n-grams\n",
        "10.Word Inflection (Singularization and Pluralization)\n",
        "11.Lemmatization\n",
        "12.Spelling Correction "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rEFrzRsoi_bn",
        "colab_type": "text"
      },
      "source": [
        "**Getting started with Textblob**\n",
        "\n",
        "!pip install textblob"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R2nFtNmUhWdN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "2b0d65a1-81c0-4519-a3a4-0e0a8fb26eaf"
      },
      "source": [
        "!pip install textblob"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: textblob in /usr/local/lib/python3.6/dist-packages (0.15.3)\n",
            "Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.6/dist-packages (from textblob) (3.2.5)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk>=3.1->textblob) (1.12.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lXlffzkUjdg7",
        "colab_type": "text"
      },
      "source": [
        "**Deriving meaning from our text**\n",
        "\n",
        "1. Words,Sentences\n",
        "2. Language\n",
        "3. POS (Parts of Speech) \n",
        "4. Content and Context\n",
        "5. Meaning of word / Root word\n",
        "6. Word frequency and count"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jo9k-vxpsDK4",
        "colab_type": "text"
      },
      "source": [
        "**Tokenization**\n",
        "\n",
        "Braking or dividing a text or a sentence into sequence of tokens:\n",
        "\n",
        "1. Word tokens\n",
        "2. Sentence tokens"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2xy8Kx4DuvjS",
        "colab_type": "text"
      },
      "source": [
        "**Textblob**\n",
        "\n",
        "A general text block, meant for larger bodies of text (esp. those containing sentences)\n",
        "\n",
        "Inherits from :class:`BaseBlob <BaseBlob>`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UxQQNZLyjQlf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Lets import Textblob from textblob\n",
        "\n",
        "import textblob\n",
        "from textblob import TextBlob"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JV3ZMmPPse3k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "mystr = 'PM Narendra Modi announced a Covid-19 taskforce that would draw up measures to combat the economic effects of the pandemic, told employers not to cut the pay of staff and called for a “Janata Curfew” on Sunday. He warned of the outbreak’s “wideranging” economic impact, underscoring the need to be prepared'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CgA40A-Os_sc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "blob = TextBlob(mystr)    #Creating an object blob"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FYv1hHugtGeK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "318cfe7a-4367-4405-b5f3-a7a81eae6711"
      },
      "source": [
        "type(blob)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "textblob.blob.TextBlob"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c1YvfwoDtbcV",
        "colab_type": "text"
      },
      "source": [
        "**We can also use Baseblob**\n",
        "\n",
        "An abstract base class that all textblob classes will inherit from.\n",
        "\n",
        "Includes words, POS tag, NP, and word count properties. \n",
        "\n",
        "Also includes basic dunder and string methods for making objects like Python strings.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2X0sHBUgtN7z",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from textblob.blob import BaseBlob"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cjbUwXLGtpkO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "base_blob = BaseBlob(mystr)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vnR23KRgtuCA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "5579cef9-1860-4e1d-f790-7c9578f5074e"
      },
      "source": [
        "type(base_blob)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "textblob.blob.BaseBlob"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEgfRCuntwS1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "0b573b34-8aef-4b13-faf8-3dd1327c8a89"
      },
      "source": [
        "#Dowloading 'punkt' package from nltk\n",
        "import nltk\n",
        "nltk.download('punkt')"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "phB1mWSruBK5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "db921ea7-8831-4e27-d5e1-392a22e974e5"
      },
      "source": [
        "#Word Tokenizing \n",
        "#Breaking the string into tokens (words) forming a 'WordList'\n",
        "#Initializes a WordList. Takes a collection of strings as its only argument.\n",
        "blob.words"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "WordList(['PM', 'Narendra', 'Modi', 'announced', 'a', 'Covid-19', 'taskforce', 'that', 'would', 'draw', 'up', 'measures', 'to', 'combat', 'the', 'economic', 'effects', 'of', 'the', 'pandemic', 'told', 'employers', 'not', 'to', 'cut', 'the', 'pay', 'of', 'staff', 'and', 'called', 'for', 'a', '“', 'Janata', 'Curfew', '”', 'on', 'Sunday', 'He', 'warned', 'of', 'the', 'outbreak', '’', 's', '“', 'wideranging', '”', 'economic', 'impact', 'underscoring', 'the', 'need', 'to', 'be', 'prepared'])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dUGkXQWfvf6u",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "82b25c13-53bb-4211-bab8-45afe9880093"
      },
      "source": [
        "#Sentence Tokenizing\n",
        "#Breaking the string into tokens (sentences) forming a 'List'\n",
        "#list() -> new empty list\n",
        "#list(iterable) -> new list initialized from iterable's items\n",
        "\n",
        "blob.sentences"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Sentence(\"PM Narendra Modi announced a Covid-19 taskforce that would draw up measures to combat the economic effects of the pandemic, told employers not to cut the pay of staff and called for a “Janata Curfew” on Sunday.\"),\n",
              " Sentence(\"He warned of the outbreak’s “wideranging” economic impact, underscoring the need to be prepared\")]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wKQfzyNgwMr1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "6d9a89ab-529c-4f47-c1f0-77e4d7d17a15"
      },
      "source": [
        "#Word_tokens\n",
        "#Breaking the sentences into tokens (words)\n",
        "for word_tokens in blob.sentences:\n",
        "  print(word_tokens.words)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['PM', 'Narendra', 'Modi', 'announced', 'a', 'Covid-19', 'taskforce', 'that', 'would', 'draw', 'up', 'measures', 'to', 'combat', 'the', 'economic', 'effects', 'of', 'the', 'pandemic', 'told', 'employers', 'not', 'to', 'cut', 'the', 'pay', 'of', 'staff', 'and', 'called', 'for', 'a', '“', 'Janata', 'Curfew', '”', 'on', 'Sunday']\n",
            "['He', 'warned', 'of', 'the', 'outbreak', '’', 's', '“', 'wideranging', '”', 'economic', 'impact', 'underscoring', 'the', 'need', 'to', 'be', 'prepared']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rY08OTw5xWU-",
        "colab_type": "text"
      },
      "source": [
        "**N-Grams**\n",
        "\n",
        "1. Collection of multiple words\n",
        "2. Useful for creating features during language modelling\n",
        "3. Return a list of n-grams (tuples of n successive words) for this blob.\n",
        "    \n",
        "    blob.ngrams(n=3)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SsWnOEyBxCZu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 986
        },
        "outputId": "a7e6542f-1e06-497d-ffd4-5bd81a2f299d"
      },
      "source": [
        "blob.ngrams(n=1)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[WordList(['PM']),\n",
              " WordList(['Narendra']),\n",
              " WordList(['Modi']),\n",
              " WordList(['announced']),\n",
              " WordList(['a']),\n",
              " WordList(['Covid-19']),\n",
              " WordList(['taskforce']),\n",
              " WordList(['that']),\n",
              " WordList(['would']),\n",
              " WordList(['draw']),\n",
              " WordList(['up']),\n",
              " WordList(['measures']),\n",
              " WordList(['to']),\n",
              " WordList(['combat']),\n",
              " WordList(['the']),\n",
              " WordList(['economic']),\n",
              " WordList(['effects']),\n",
              " WordList(['of']),\n",
              " WordList(['the']),\n",
              " WordList(['pandemic']),\n",
              " WordList(['told']),\n",
              " WordList(['employers']),\n",
              " WordList(['not']),\n",
              " WordList(['to']),\n",
              " WordList(['cut']),\n",
              " WordList(['the']),\n",
              " WordList(['pay']),\n",
              " WordList(['of']),\n",
              " WordList(['staff']),\n",
              " WordList(['and']),\n",
              " WordList(['called']),\n",
              " WordList(['for']),\n",
              " WordList(['a']),\n",
              " WordList(['“']),\n",
              " WordList(['Janata']),\n",
              " WordList(['Curfew']),\n",
              " WordList(['”']),\n",
              " WordList(['on']),\n",
              " WordList(['Sunday']),\n",
              " WordList(['He']),\n",
              " WordList(['warned']),\n",
              " WordList(['of']),\n",
              " WordList(['the']),\n",
              " WordList(['outbreak']),\n",
              " WordList(['’']),\n",
              " WordList(['s']),\n",
              " WordList(['“']),\n",
              " WordList(['wideranging']),\n",
              " WordList(['”']),\n",
              " WordList(['economic']),\n",
              " WordList(['impact']),\n",
              " WordList(['underscoring']),\n",
              " WordList(['the']),\n",
              " WordList(['need']),\n",
              " WordList(['to']),\n",
              " WordList(['be']),\n",
              " WordList(['prepared'])]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i9Iq4KpexqHj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#bigram\n",
        "#for bigram in blob.ngrams(n=2):\n",
        " # print(bigram)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "io9kJ4mTAG61",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#trigram\n",
        "#for trigram in blob.ngrams(n=3):\n",
        "#  print(trigram)\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TqnuXb3vAxWl",
        "colab_type": "text"
      },
      "source": [
        "###**Language Translation and Language Detection**\n",
        "\n",
        "blob.translate(from_lang='auto', to='en')\n",
        "\n",
        "\n",
        "Docstring:\n",
        "Translate the blob to another language.\n",
        "\n",
        "Uses the Google Translate API. \n",
        "Returns a new TextBlob.\n",
        "\n",
        "Requires an internet connection."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T3WCSHK9AX9X",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "e51ec386-a5be-4342-b0df-61b0744629a7"
      },
      "source": [
        "blob.translate(to = 'fr')  #Tranlated to french"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "TextBlob(\"Le Premier ministre Narendra Modi a annoncé la création d'un groupe de travail Covid-19 qui élaborerait des mesures pour lutter contre les effets économiques de la pandémie, a dit aux employeurs de ne pas réduire les salaires du personnel et a appelé à un \"couvre-feu Janata\" dimanche. Il a mis en garde contre l’impact économique «élargi» de l’épidémie, soulignant la nécessité de se préparer\")"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o-X4OS2XCLw0",
        "colab_type": "text"
      },
      "source": [
        "**Language Detection**\n",
        "\n",
        "blob.detect_language()\n",
        "\n",
        "Docstring: Detect the blob's language using the Google Translate API.\n",
        "\n",
        "Requires an internet connection.\n",
        "\n",
        "Usage:\n",
        "::\n",
        "\n",
        "    >>> b = TextBlob(\"bonjour\")\n",
        "    >>> b.detect_language()\n",
        "    u'fr"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TZ5EzGKTA6-1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "91e758bc-98ef-47bb-af6f-780d2133c5ec"
      },
      "source": [
        "blob.detect_language()"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'en'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "azUda4VvCD9r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}